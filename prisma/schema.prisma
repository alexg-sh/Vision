// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  organizations OrganizationMember[]
  posts         Post[]
  // Add other fields as needed, e.g., passwordHash if using credentials
}

model Organization {
  id        String        @id @default(cuid())
  name      String
  slug      String        @unique // For URL-friendly identifiers
  imageUrl  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   OrganizationMember[]
  boards    Board[]
  auditLogs AuditLog[]
}

// Junction table for many-to-many relationship between User and Organization
model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("MEMBER") // e.g., ADMIN, MEMBER
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Board {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts          Post[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
  @@index([authorId])
}

// Example Audit Log model
model AuditLog {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?      // User who performed the action (optional)
  action         String       // e.g., "CREATE_BOARD", "UPDATE_POST"
  entityType     String       // e.g., "BOARD", "POST"
  entityId       String?      // ID of the entity affected
  details        Json?        // Additional details about the action
  createdAt      DateTime     @default(now())

  @@index([organizationId])
  @@index([userId])
}

// Add other models as needed, e.g., Notification, CustomField, etc.
