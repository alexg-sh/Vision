generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  username             String?              @unique
  name                 String?
  email                String?              @unique
  emailVerified        DateTime?
  image                String?
  passwordHash         String?
  bio                  String?
  website              String?
  twitter              String?
  linkedin             String?
  github               String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  accounts             Account[]
  sessions             Session[]
  organizations        OrganizationMember[]
  posts                Post[]
  comments             Comment[]
  createdBoards        Board[]              @relation("CreatedBoards")
  bans                 OrganizationBan[]
  sentInvites          Invite[]             @relation("SentInvites")
  receivedInvites      Invite[]             @relation("ReceivedInvites")
  notifications        Notification[]
  inviterNotifications Notification[]       @relation("InviterNotifications")
  boardMembers         BoardMember[]
  auditLogs            AuditLog[]
  bannedOrgActions     OrganizationBan[]    @relation("BannedByUsers")
  bannedBoardActions   BoardMember[]        @relation("BannedBoardUsers")
  postVotes            PostVote[]
  commentVotes         CommentVote[]
  followers            Follow[]             @relation("followers")
  following            Follow[]             @relation("following")
  preferences          UserPreferences?
}

model UserPreferences {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications        Boolean  @default(true)
  mentionNotifications      Boolean  @default(true)
  replyNotifications        Boolean  @default(true)
  voteNotifications         Boolean  @default(false)
  commentNotifications      Boolean  @default(true)
  statusChangeNotifications Boolean  @default(true)
  digestEmail               String   @default("weekly") // 'daily', 'weekly', 'never'
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent    String?

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id            String               @id @default(cuid())
  name          String
  slug          String               @unique
  imageUrl      String?
  description   String?
  isPrivate     Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  members       OrganizationMember[]
  boards        Board[]
  auditLogs     AuditLog[]
  bans          OrganizationBan[]
  invites       Invite[]
  notifications Notification[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("MEMBER") // e.g., ADMIN, MEMBER
  status         String       @default("ACTIVE") // e.g., ACTIVE, BANNED
  bannedAt       DateTime?
  banReason      String?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model OrganizationBan {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  bannedAt       DateTime @default(now())
  banReason      String?
  bannedByUserId String?

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  bannedBy     User?        @relation("BannedByUsers", fields: [bannedByUserId], references: [id], onDelete: SetNull)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([bannedByUserId])
}

model Board {
  id             String         @id @default(cuid())
  name           String
  description    String?
  image          String?
  isPrivate      Boolean        @default(false)
  organizationId String?
  createdById    String
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      User           @relation("CreatedBoards", fields: [createdById], references: [id], onDelete: Cascade)
  posts          Post[]
  invites        Invite[]
  notifications  Notification[]
  members        BoardMember[]
  auditLogs      AuditLog[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([organizationId])
  @@index([createdById])
}

model BoardMember {
  id             String    @id @default(cuid())
  userId         String
  boardId        String
  role           String    @default("MEMBER") // e.g., ADMIN, MEMBER, VIEWER
  status         String    @default("ACTIVE") // e.g., ACTIVE, BANNED
  bannedAt       DateTime?
  banReason      String?
  bannedByUserId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  board    Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  bannedBy User? @relation("BannedBoardUsers", fields: [bannedByUserId], references: [id], onDelete: SetNull)

  @@unique([userId, boardId])
  @@index([userId])
  @@index([boardId])
  @@index([bannedByUserId])
}

model Post {
  id            String         @id @default(cuid())
  title         String
  content       String?
  boardId       String
  board         Board          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes         Int            @default(0)
  tags          String[]       @default([])
  comments      Comment[]
  postVotes     PostVote[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]

  @@index([boardId])
  @@index([authorId])
}

model Comment {
  id         String   @id @default(cuid())
  postId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content    String
  votes      Int      @default(0)
  commentVotes CommentVote[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PostVote {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  voteType  Int      // 1 for like, -1 for dislike
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  voteType  Int      // 1 for like, -1 for dislike
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String?
  boardId   String?
  userId    String
  action    String   // e.g., CREATE_BOARD, UPDATE_ORGANIZATION_NAME, ADD_MEMBER, DELETE_POST
  entityType String  // e.g., BOARD, ORGANIZATION, MEMBER, POST, INVITE
  entityId  String
  entityName String?
  details   Json?
  createdAt DateTime @default(now())

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  board        Board?        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orgId, createdAt(sort: Desc)])
  @@index([boardId, createdAt(sort: Desc)])
  @@index([userId])
  @@index([entityType, entityId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  content   String
  link      String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  inviterId String?
  inviter   User?   @relation("InviterNotifications", fields: [inviterId], references: [id], onDelete: SetNull)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  inviteId String? @unique
  invite   Invite? @relation(fields: [inviteId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, read])
}

enum NotificationType {
  MENTION
  REPLY
  VOTE
  STATUS_UPDATE
  ANNOUNCEMENT
  POLL_CREATED
  INVITE
}

model Invite {
  id              String       @id @default(cuid())
  invitedUsername String?
  status          InviteStatus @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  invitedById     String
  invitedBy       User         @relation("SentInvites", fields: [invitedById], references: [id], onDelete: Cascade)

  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  boardId         String?
  board           Board?       @relation(fields: [boardId], references: [id], onDelete: Cascade)

  invitedUserId   String?
  invitedUser     User?        @relation("ReceivedInvites", fields: [invitedUserId], references: [id], onDelete: Cascade)

  notification    Notification?

  @@index([invitedUserId])
  @@index([organizationId])
  @@index([boardId])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Follow {
  id           String   @id @default(cuid())
  follower     User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId   String
  following    User     @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}
